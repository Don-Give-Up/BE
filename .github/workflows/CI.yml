name: CI Workflow

on:
  push:
    branches:
      - main   # Branch to monitor for changes
      - dev

jobs:
  build:
    runs-on: ubuntu-latest  # Operating system to use

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches  # Path to cache
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}  # Cache key
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up JDK
        uses: actions/setup-java@v3  # Updated version
        with:
          java-version: '17'  # Java version to use
          distribution: 'temurin'

      - name: Build with Gradle
        env:
          EXTERNAL_DB_URL: ${{ secrets.EXTERNAL_DB_URL }}  # Get DB_URL from GitHub Secrets
          EXTERNAL_DB_USERNAME: ${{ secrets.EXTERNAL_DB_USERNAME }}  # Username
          EXTERNAL_DB_PASSWORD: ${{ secrets.EXTERNAL_DB_PASSWORD }}  # Password
          # Note: The variable names on the left must match those in application.
          # properties or application.yml.
          # Otherwise, it will cause a compile error (contextLoads() FAILED)
          # If you push devCreate or dev Profile, you should write like "EXTERNAL_DB_URL"
        run: ./gradlew build

      - name: Run tests
        run: ./gradlew test  # Command to run tests

      - name: Send Discord Notification
        if: ${{ always() }}  # Set to always run (regardless of build success)
        run: |
          curl -X POST -H "Content-type: application/json" --data '{
            "content": "CI Workflow Notification: \n**There are changes in the backend server!**\n**Branch:** '${{ github.ref }}'\n**Status:** '${{ job.status }}'\n---"
          }' ${{ secrets.DISCORD_WEBHOOK_URL }}

      # 여기서부터 AWS 배포와 관련된 이야기

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}