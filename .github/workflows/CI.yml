name: GitHub Action CI / AWS CD Workflow

on:
  push:
    branches:
      - main   # Branch to monitor for changes
#      - dev
#      - feature/south-korea
#      - feature/north-korea

jobs:
  build:
    runs-on: ubuntu-latest  # Operating system to use

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Gradle packages
        uses: actions/cache@v3
        with:
          path: ~/.gradle/caches  # Path to cache
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}  # Cache key
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Set up JDK
        uses: actions/setup-java@v3  # Updated version
        with:
          java-version: '17'  # Java version to use
          distribution: 'temurin'

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        env:
          AWS_DB_URL: ${{ secrets.AWS_DB_URL }}
          AWS_DB_USERNAME: ${{ secrets.AWS_DB_USERNAME }}  # Username
          AWS_DB_PASSWORD: ${{ secrets.AWS_DB_PASSWORD }}  # Password
          # Note: The variable names on the left must match those in application.properties or application.yml.
          # Otherwise, it will cause a compile error (contextLoads() FAILED)
          # If you push local or localCreate Profile, you should write like "LOCAL_DB_URL"
        run: ./gradlew clean build -x test

      # 여기서부터 AWS CD 와 관련된 이야기

      # 1. AWS 민감 정보 설정
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 2. Amazon ECR 에 로그인하기
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 3. Elastic Container Registry 설정
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: meta_user_06
          IMAGE_TAG: meta_user_06
        run: |
          docker buildx build --platform=linux/amd64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      # 4. 시간 설정
      - name: Get current time
        uses: 1466587594/get-current-time@v2
        id: current-time
        with:
          format: YYYYMMDD_HH-mm-ss
          utcOffset: "+09:00"

      # 5. 배포 패키지 생성
      - name: Generate deployment package
        run: |
          mkdir -p deploy
          cp Dockerrun.aws.json deploy/Dockerrun.aws.json
          cd deploy && zip -r deploy.zip .

      # 6. 최종 배포 (Secret 미완성)
      - name: Beanstalk Deploy
        uses: einaregilsson/beanstalk-deploy@v14
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }} ## 계정 ACCESS KEY 값
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ secrets.EB_APP_NAME }} ## AWS EB 애플리케이션 이름
          environment_name: ${{ secrets.EB_ENV_NAME }} ## AWS EB 환경 이름
          version_label: earth-docker-${{steps.current-time.outputs.formattedTime}}
          region: ${{ secrets.AWS_REGION }}    ## ap-northeast-2
          deployment_package: deploy/deploy.zip
          wait_for_environment_recovery: 200

      - name: Send Discord Notification
        if: ${{ always() }}  # Set to always run (regardless of build success)
        run: |
          curl -X POST -H "Content-type: application/json" --data '{
            "content": "CI Workflow Notification: \n**There are changes in the backend server!**\n**Branch:** '${{ github.ref }}'\n**Status:** '${{ job.status }}'\n---"
          }' ${{ secrets.DISCORD_WEBHOOK_URL }}
